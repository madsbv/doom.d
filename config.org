#+title: Config
* Notes
** Ideas
*** Org-mode font lock optimization ideas
- Play with font-lock-maximum-decoration
- Play with (setq org-highlight-latex-and-related '(latex script entities)), other combinations
- Do some debugging/instrumentation a la https://www.emacswiki.org/emacs/FontLockSpeed
- TODO: Figure out what extra work org does inside proof environments (and others), and why, and figure out how to disable it.
*** tree-sitter
#+begin_src emacs-lisp :tangle no
;; From https://github.com/emacs-tree-sitter/tree-sitter-langs/pull/157
(setq tree-sitter-langs--bin-dir (concat tree-sitter-langs-grammar-dir "bin/"))
(setq treesit-extra-load-path (append (list (tree-sitter-langs--bin-dir))))
(defun tree-sitter-langs-build--fixup-shared-objects-for-treesit ()
   "tree-sitter-langs-build releases grammars as LANG.so, but treesit needs libtree-sitter-LANG.so"
   (dolist (file (directory-files (tree-sitter-langs--bin-dir) 'full
                                  (concat "\\" (car tree-sitter-load-suffixes) "$")))
     ;; make symlink libtree-sitter-c.so -> c.so
     (make-symbolic-link file
                         (concat (file-name-as-directory (file-name-directory file))
                                 "libtree-sitter-"
                                 (file-name-nondirectory file)))))
(tree-sitter-langs-build--fixup-shared-objects-for-treesit)
#+end_src
* Package installation
:PROPERTIES:
:ID:       5d78469c-8157-4f3f-b49e-e3e1046eff6f
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! org-roam-bibtex)
(package! org-roam-server)
(package! org-ref)
(package! org-fragtog)
(package! org-gtd)
(package! sage-shell-mode)
;; Use existing pdf-tools if available, otherwise install.
;; Needed to make pdf-tools from nixpkgs work.
(package! pdf-tools :built-in 'prefer)
(package! evil-matchit)
(package! just-mode)
#+end_src
* Config
** Emacs
*** Personal variables
:PROPERTIES:
:ID:       80ba8b16-1d1e-4282-8a31-e32819a02084
:END:
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Mads Bach Villadsen"
      user-mail-address "mvilladsen@pm.me")
(setq! mbv/my-personal-directory "~/Dropbox/docs/"
       mbv/my-org-directory (concat mbv/my-personal-directory "org/")
       mbv/my-papers-directory (concat mbv/my-personal-directory "work/math-resources/sources/papers/")
       mbv/my-org-roam-directory (concat mbv/my-org-directory "org-roam/")
       mbv/my-paper-notes-directory (concat mbv/my-org-roam-directory "paper-notes/")
       mbv/my-main-bib-file (concat mbv/my-personal-directory "work/math-resources/sources/papers.bib"))
#+end_src
*** Basic UI
#+begin_src emacs-lisp
;; enable word-wrap (almost) everywhere
(+global-word-wrap-mode +1)
(setq display-line-numbers-type 'visual)
(setq! doom-molokai-brighter-comments t)
(setq! doom-molokai-brighter-modeline t)
(setq! doom-theme 'doom-molokai)
#+end_src
*** evil
:PROPERTIES:
:ID:       12e4d4eb-378b-46e9-9d97-c4af4d7f39ae
:END:
#+begin_src emacs-lisp :tangle yes
(setq! evil-cross-lines t
       evil-snipe-scope 'buffer
       evil-want-fine-undo t)
;; Disable default yank to system clipboard.
;; To use system clipboard, use + register, e.g.
;; +dd, +cw, +y.
(setq! select-enable-clipboard nil)

(map! "s-c" #'copy-to-clipboard
      "s-v" #'paste-from-clipboard)

;; From https://emacs.stackexchange.com/questions/12122/how-to-access-os-clipboard-using-emacs-evil
(defun paste-from-clipboard ()
  (interactive)
  (setq x-select-enable-clipboard t)
  (call-interactively #'evil-paste-before-cursor-after)
  (setq x-select-enable-clipboard nil))
(defun copy-to-clipboard()
  (interactive)
  (setq x-select-enable-clipboard t)
  (call-interactively #'evil-yank)
  (setq x-select-enable-clipboard nil))
#+end_src
**** evil-matchit
:PROPERTIES:
:ID:       9c76ed39-ee3e-4e89-8713-ce3b77dc66dd
:END:
#+begin_src emacs-lisp :tangle yes
(global-evil-matchit-mode 1)
#+end_src
*** snippet
:PROPERTIES:
:ID:       522dd2b3-4c09-4ef8-81df-ce520e8959f2
:END:
#+begin_src emacs-lisp :tangle yes
;; Nested snippets
(after! yasnippet
  (setq! yas-triggers-in-field t))
(map! :after yasnippet
      "C-s" #'yas-next-field)
#+end_src

*** workspaces
:PROPERTIES:
:ID:       91d88b8d-c942-4037-8411-6de47f2de9df
:END:

#+begin_src emacs-lisp :tangle yes
;; Control which workspace new frame are initialized with when opened with emacsclient.
;; The default value +workspaces-associate-frame-fn creates a new workspace every time.
;; With nil, it just opens in some existing workspace.
(setq persp-emacsclient-init-frame-behaviour-override nil)
#+end_src
*** Convenience functions
:PROPERTIES:
:ID:       e5879a87-628a-4e45-bc64-1e0cec4e1410
:END:
Note: I previously had a 'mbv/open-finder-here', but Doom actually provides that natively with '<leader> o o'.
#+begin_src emacs-lisp :tangle yes
(defun mbv/run-kitty-here ()
  (interactive)
  (shell-command (concat "kitty --single-instance "
            (file-name-directory (or load-file-name buffer-file-name))
              " > /dev/null 2>&1 & disown") nil nil))

(defun mbv/open-externally ()
  (interactive)
  (shell-command (concat "open " buffer-file-name " > /dev/null 2>&1 & disown") nil nil))

(map! :leader
      :n "o C-t" #'mbv/run-kitty-here)
#+end_src

*** Performance
Based on https://github.com/brotzeit/rustic/issues/312#issuecomment-1113738865, while high gcmh-idle-delay can prevent gc from running while active, it can also cause memory pressure to accumulate enough that in cases where gc runs while active, it's worse than otherwise.

Note: By default in Doom, this is set to auto. We could also play with the parameters of that.
#+begin_src emacs-lisp :tangle yes
(setq! gcmh-idle-delay 'auto
       gcmh-low-cons-threshold (* 800 1000)           ;; Default value 800000
       gcmh-high-cons-threshold (* 33 1024 1024))         ;; Default value 33554432

;; From https://www.reddit.com/r/emacs/comments/14c4l8j/way_to_make_emacs_feel_smoother/
(setq! jit-lock-stealth-time 1.25)
(setq! jit-lock-chunk-size 2048)
#+end_src
*** Emacs server
:PROPERTIES:
:ID:       4606322c-471e-4579-9ac4-2ce63506e971
:END:
#+begin_src emacs-lisp :tangle yes
(server-start)
#+end_src
** Completion
*** company
:PROPERTIES:
:ID:       248fc78a-f917-4379-b852-a3dba2574724
:END:
#+begin_src emacs-lisp :tangle yes
(map! :after company
      :map company-active-map
     "C-l" #'company-complete-common-or-cycle
     "<tab>" nil
     "<backtab>" nil
     "TAB" nil
     "RET" nil
     "<return>" nil
     "C-<return>" #'company-complete-selection)
(setq! company-idle-delay 0.4)
#+end_src
*** vertico
:PROPERTIES:
:ID:       e2d44da6-e2c8-441c-a741-72e191b8bd6f
:END:
NOTE: Sometimes the text in popup buffers shifts to the left so the start is cut off. I have tried to fix this but don't know how to recreate it reliably. However, it should be something to do with posframes.

I suspect the issue has to do with vertico-posframe; in `vertico-posframe-get-size`, there's some buffer-local value handling. I don't know where those might get set, but next time there's a problem that might be something to investigate.

I also found that changing the value of vertico-posframe-parameters fixes the issue when it shows up; just change it to something else, pop a posframe, then change it back again.

posframe.el itself does some caching-like stuff, see https://github.com/tumashu/posframe/blob/739d8fd1081bdd0d20dee9e437d64df58747b871/posframe.el#L301-L307
Could be worth hooking into for debugging purposes.
#+begin_src emacs-lisp :tangle yes
(setq! consult-locate-args "locate -i"
       vertico-posframe-poshandler 'posframe-poshandler-frame-top-center
       vertico-posframe-truncate-lines t
       vertico-posframe-parameters
      '((left-fringe . 8)
        (right-fringe . 8)))
#+end_src
** Documents
*** TODO biblio
:PROPERTIES:
:ID:       72045c34-0fe5-4ac3-8586-753211054673
:END:
Modify 'arxiv-get-pdf-add-bibtex-entry' to use different file name from bibtex key (add title to pdf file name).
Maybe define a general function to rectify pdf file name for any entry, and call it after arxiv-get-pdf-add-bibtex-entry?
#+begin_src emacs-lisp :tangle yes
(after! citar
  (setq! bibtex-completion-bibliography mbv/my-main-bib-file
         citar-bibliography mbv/my-main-bib-file
         bibtex-completion-library-path mbv/my-papers-directory
         bibtex-completion-notes-path mbv/my-paper-notes-directory
         citar-library-paths `(,mbv/my-papers-directory)
         citar-notes-paths `(,mbv/my-paper-notes-directory)
         bibtex-completion-pdf-field "file" ;; Read "file" field in bib file to find pdf files
         bibtex-completion-find-additional-pdfs t ;; Find all files matching [bibtexkey]*.pdf
         bibtex-completion-pdf-extension '(".pdf" ".djvu") ;; Match djvu files too. Other filetypes can also be added.
         bibtex-autokey-year-length 4
             bibtex-autokey-titlewords 0
         bibtex-autokey-name-year-separator ""
         bibtex-autokey-name-case-convert-function 'upcase-initials)
  (citar-org-roam-mode))
(map! :leader
      :prefix "r"
      "o" #'citar-open
      "i" #'citar-insert-citation)
#+end_src
**** org-noter
:PROPERTIES:
:ID:       1a703448-20ea-48e7-8e38-3adba05dd374
:END:
#+begin_src emacs-lisp :tangle yes
(after! org-mode
  (setq! org-noter-hide-other nil
         org-noter-notes-search-path mbv/my-paper-notes-directory))
#+end_src
*** latex
**** RefTeX
:PROPERTIES:
:ID:       2e9cb8fe-74ad-4581-877d-60782eed5760
:END:
#+begin_src emacs-lisp :tangle yes
(setq! reftex-default-bibliography mbv/my-main-bib-file)
#+end_src
**** PDF viewer
:PROPERTIES:
:ID:       8d7e8cc1-648f-46c0-9337-fd129c854a97
:END:
#+begin_src emacs-lisp :tangle yes
(setq! +latex-viewers '(pdf-tools))
;; For synctex
(setq TeX-source-correlate-start-server t)
#+end_src
**** cdlatex
:PROPERTIES:
:ID:       c1c78b2d-e66e-4953-99b2-232cc8ad691f
:END:
- cdlatex-command-alist lists keywords for tab-completion

Note that the cdlatex variables have to be given a characters ASCII code, ? converts a character to its code (you might have to escape some chars with \). The elisp function string-to-char does the same (for the first char in a string), print and insert takes an ASCII code and either prints the corresponding char in the minibuffer, or inserts the char in the buffer.
(Actually a char is its code, ? just instructs Emacs to treat the char as itself and not as a function name.)

According to https://lists.gnu.org/archive/html/emacs-orgmode/2011-10/msg00716.html, you have to restart emacs or run (cdlatex-reset-mode) after changing this config.

#+begin_src emacs-lisp :tangle yes
;; Use cdlatex over yasnippet (should still default back to yasnippet).
(map! :map cdlatex-mode-map
      :i "TAB" #'cdlatex-tab)

;; Sets cdlatex-math-modify-prefix to its default explicity, and changes math-symbol key.
;; org-defkey is used to let cdlatex key interact correctly with other stuff.
(setq cdlatex-math-modify-prefix ?')
(setq cdlatex-math-symbol-prefix ?`) ; On danish keyboard layout, switch this to ?¨ instead
(after! org-mode (org-defkey org-cdlatex-mode-map "`" 'cdlatex-math-symbol))
;; add symbols
(setq cdlatex-math-symbol-alist
      '((?F ("\\Phi"))
        (?> ("\\xrightarrow" "\\mapsto" "\\max"))
        (?t ("\\tau" "\\otimes" "\\tan"))
        (?. ("\\cdots" "\\ldots" "\\cdot"))
        (?d ("\\delta" "\\partial" "\\bar{\\partial}"))
        (?* ("\\times" "\\dagger"))
        (?: ("\\colon"))
        (?b ("\\beta" "\\bullet"))
        (?\{ ("\\subseteq" "\\subset"))
        (?\} ("\\supseteq" "\\supset"))
        (?+ ("\\oplus" "\\bigoplus" "\\cup"))))
(setq cdlatex-math-modify-alist
      '((?B "\\mathbb" nil t nil nil)
        (?s "\\mathscr" nil t nil nil)
        (?f "\\mathfrak" nil t nil nil)
        (?T "\\widebar" nil t nil nil)
        (?o "\\operatorname" nil t nil nil)))

(setq cdlatex-use-dollar-to-ensure-math nil)
#+end_src

*** org/latex setup
    :PROPERTIES:
    :ID:       a1e22973-e0e1-497e-94de-1b4c291033c6
    :END:
    Some org/latex settings, and a preamble setup.
**** Origin
     The package list and classes are originally based on [[file:project-skeletons/homework/][this template]]. In addition to what's included here, that template also loads the packages:
     - showkeys (in draft mode, shows labels where defined in output PDF)
     - enumitem (control list formatting more carefully; used for good theorem environments)
     - fixme (create todo notes in latex source that block final compilation if not fixed)
     The original template also includes codes for:
     - The command \\widebar in direct tex. The only package I know that provides this command is [[http://mirrors.rit.edu/CTAN/fonts/mathabx/mathtest.pdf][mathabx]], but that also changes many other things, and I don't know whether it's actively supported

**** Basic setup
 #+BEGIN_SRC emacs-lisp
;; Whether to preview latex fragments when opening new Org file. Might become slow in big files, in which case
;; it can be disabled here or by adding the following on a per-file basis: #+STARTUP: nolatexpreview
(setq org-startup-with-latex-preview 'nil
      org-latex-prefer-user-labels t
      org-latex-reference-command "\\autoref{%s}"
      org-latex-caption-above '(image table src-block special-block))
(after! org-mode
  ;; (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0))
  (plist-put org-format-latex-options :scale 1.0))
(add-hook 'org-mode-hook (lambda () (plist-put org-format-latex-options :scale 1.0)))
;; Enable org-cdlatex in every org buffer
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)

;; oc-biblatex.el adds global bibliography files to exported tex documents by default. This advice undoes that.
(advice-add 'org-cite-list-bibliography-files :around 'mbv/override-global-bibliography)
(defun mbv/override-global-bibliography (f)
  (let ((org-cite-global-bibliography nil))
    (funcall f)))

(defun mbv/clear-org-latex-preview-cache ()
  (interactive)
  (dired-delete-file org-preview-latex-image-directory 'always t))
 #+END_SRC
**** PROJ Org-TeX compilation tools
:PROPERTIES:
:ID:       97aeb11e-0de9-4305-bb65-ba18fdee4330
:END:
dvipng and dvisvgm do not support putting tikz code in previews. This can be done with imagemagick, but that's prone to bugs, especially around imagemagick updates.

#+begin_src emacs-lisp :tangle yes
;; -f forces latexmk to keep going on errors
;; -gg cleans all generated files before generating, in particular latexmk ALWAYS compiles the source even if nothing has changed.
(setq org-latex-pdf-process '("latexmk -f -gg -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-preview-latex-default-process 'dvisvgm)
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
#+END_SRC

***** ImageMagick
At the time of writing (200429), ImageMagick throws a [[https://github.com/ImageMagick/ImageMagick/issues/884][warning]] about color space and grayscale images when trying to preview fragments. It does not affect output. According to the linked github issue (and own testing), adding -strip to the arguments to 'convert' removes the warning; there are other solutions in that thread.
Note that trying to generate many fragments at once causes some slowdown, since fragment generation is not done asynchronously. However, fragments are cached, so this should not be a big deal.
#+begin_src emacs-lisp :tangle no
(plist-put (cdr (assoc 'imagemagick org-preview-latex-process-alist)) :image-converter '("convert -density %D -trim -strip -antialias %f -quality 100 %O"))
#+end_src

**** Package and macro setup
 The latex preamble used for latex fragment previews is governed by org-format-latex-header, while export is governed by org-latex-classes and org-latex-default-class
 To add more macros to both that preamble and (multiple) export preambles, we define a variable to hold macros, then append that to the other preambles.
 LaTeX note: amsmath defines a bunch of standard operators [[http://mirror.utexas.edu/ctan/macros/latex/required/amsmath/amsopn.pdf][here]]. Some of these are 'incorrect', i.e. $\hom$ should typeset Hom, not hom. The LaTeX code "\let\hom\undefined" unbinds $\hom$, assuming \undefined is, in fact, undefined.
 Semantic notes:
  - $\id$ is the identity map
  - $\ker,\coker,\im$ are kernel, cokernel, image of a function. \ker is defined by default.
  - $\hom$ is a space of homomorphism, or the set of morphisms between two objects in a category
  - $\ext$ is an Ext functor
  - $\shom$ and $\sext$ are sheafy versions of their non-s namesakes
  - $\tensor$ is tne tensor product of two modules/other
  - $\spec$ is the affine scheme of a ring
  - $\proj$ is the projective scheme of a graded ring
  - \(\pic\) denotes Picard groups
  - $\codim$ is codimension
  - $\Supp$ denotes support of something, e.g. a sheaf
  - \(\dualab{A}\) indicates the dual abelian variety of \(A\) (i.e. \(\pic^0(A)\)
  - \(\sh F\): Typeface for sheaves
  - \proofstep is for partitioning long proofs into individual steps, to be used inside \begin{proof} environment. From https://tex.stackexchange.com/questions/207309/how-to-nicely-split-proofs-into-different-parts
 #+begin_src emacs-lisp
(after! org
  ;; Make more LaTeX packages available for org and exported latex. These packages are added to preamble of exported latex. If t is specified, the package is also available when viewing latex snippets in org-mode.
  (setq org-latex-packages-alist
        '(("" "etoolbox" t) ;; programming logic for \abs, \norm, \inner commands
          ("" "microtype" t) ;; typographic improvements
          ("" "mathrsfs" t) ;; \mathscr font
          ("AUTO" "babel" t) ;; gets passed options from \documentclass as well
          ("" "tikz" t)
          ("" "tikz-cd" t)
          ("" "amsthm" t)
          ("" "thmtools" t)
          ("" "thm-restate" t)
          ("" "xpatch" t)
          ("autostyle" "csquotes" t)))

  (setq mbv/my-latex-macros
        "
% Biblatex setup
\\usepackage[backend=biber,style=alphabetic,giveninits=true,url=true,eprint=true,doi=false,isbn=false]{biblatex}
% Suppress 'In: JournalTitle' and just write 'JournalTitle' instead for journal articles.
% From: https://tex.stackexchange.com/questions/10682/suppress-in-biblatex
\\renewbibmacro{in:}{%
  \\ifentrytype{article}{}{\\printtext{\\bibstring{in}\\intitlepunct}}}

% All tikzcd cells are in displaystyle by default
\\tikzcdset{
  cells={font=\\everymath\\expandafter{\\the\\everymath\\displaystyle}},
}

\\DeclareMathOperator\\id{id}
\\DeclareMathOperator\\coker{coker}
\\DeclareMathOperator\\im{im}
\\DeclareMathOperator\\codim{codim}
\\let\\hom\\undefined
\\DeclareMathOperator\\hom{Hom}
\\DeclareMathOperator\\shom{\\underline{Hom}}
\\DeclareMathOperator\\ext{Ext}
\\DeclareMathOperator\\sext{\\underline{Ext}}
\\DeclareMathOperator\\tor{Tor}
\\DeclareMathOperator\\rk{rk}
\\newcommand\\tensor{\\otimes}
\\DeclareMathOperator\\spec{Spec}
\\DeclareMathOperator\\proj{Proj}
\\DeclareMathOperator\\pic{Pic}
\\DeclareMathOperator\\supp{Supp}
\\newcommand\\dualab\\widehat
\\newcommand\\sh\\mathscr

\\makeatletter
\\newcounter{proofstep}
\\xpretocmd{\\proof}{\\setcounter{proofstep}{0}}{}{}
\\newcommand{\\proofstep}[1]{%
  \\par
  \\addvspace{\\medskipamount}%
  \\stepcounter{proofstep}%
  \\noindent\\emph{Step \\theproofstep: #1}\\par\\nobreak\\smallskip
  \\@afterheading
}
\\makeatother

% Define \\widebar
\\makeatletter
\\let\\save@mathaccent\\mathaccent
\\newcommand*\\if@single[3]{%
  \\setbox0\\hbox{${\\mathaccent\"0362{#1}}^H$}%
        \\setbox2\\hbox{${\\mathaccent\"0362{\\kern0pt#1}}^H$}%
  \\ifdim\\ht0=\\ht2 #3\\else #2\\fi
  }
%The bar will be moved to the right by a half of \\macc@kerna, which is computed by amsmath:
\\newcommand*\\rel@kern[1]{\\kern#1\\dimexpr\\macc@kerna}
%If there's a superscript following the bar, then no negative kern may follow the bar;
%an additional {} makes sure that the superscript is high enough in this case:
\\newcommand*\\widebar[1]{\\@ifnextchar^{{\\wide@bar{#1}{0}}}{\\wide@bar{#1}{1}}}
%Use a separate algorithm for single symbols:
\\newcommand*\\wide@bar[2]{\\if@single{#1}{\\wide@bar@{#1}{#2}{1}}{\\wide@bar@{#1}{#2}{2}}}
\\newcommand*\\wide@bar@[3]{%
  \\begingroup
  \\def\\mathaccent##1##2{%
%Enable nesting of accents:
    \\let\\mathaccent\\save@mathaccent
%If there's more than a single symbol, use the first character instead (see below):
    \\if#32 \\let\\macc@nucleus\\first@char \\fi
%Determine the italic correction:
    \\setbox\\z@\\hbox{$\\macc@style{\\macc@nucleus}_{}$}%
    \\setbox\\tw@\\hbox{$\\macc@style{\\macc@nucleus}{}_{}$}%
    \\dimen@\\wd\\tw@
    \\advance\\dimen@-\\wd\\z@
%Now \\dimen@ is the italic correction of the symbol.
    \\divide\\dimen@ 3
    \\@tempdima\\wd\\tw@
    \\advance\\@tempdima-\\scriptspace
%Now \\@tempdima is the width of the symbol.
    \\divide\\@tempdima 10
    \\advance\\dimen@-\\@tempdima
%Now \\dimen@ = (italic correction / 3) - (Breite / 10)
    \\ifdim\\dimen@>\\z@ \\dimen@0pt\\fi
%The bar will be shortened in the case \\dimen@<0 !
    \\rel@kern{0.6}\\kern-\\dimen@
    \\if#31
      \\overline{\\rel@kern{-0.6}\\kern\\dimen@\\macc@nucleus\\rel@kern{0.4}\\kern\\dimen@}%
      \\advance\\dimen@0.4\\dimexpr\\macc@kerna
%Place the combined final kern (-\\dimen@) if it is >0 or if a superscript follows:
      \\let\\final@kern#2%
      \\ifdim\\dimen@<\\z@ \\let\\final@kern1\\fi
      \\if\\final@kern1 \\kern-\\dimen@\\fi
    \\else
      \\overline{\\rel@kern{-0.6}\\kern\\dimen@#1}%
    \\fi
  }%
  \\macc@depth\\@ne
  \\let\\math@bgroup\\@empty \\let\\math@egroup\\macc@set@skewchar
  \\mathsurround\\z@ \\frozen@everymath{\\mathgroup\\macc@group\\relax}%
  \\macc@set@skewchar\\relax
  \\let\\mathaccentV\\macc@nested@a
%The following initialises \\macc@kerna and calls \\mathaccent:
  \\if#31
    \\macc@nested@a\\relax111{#1}%
  \\else
%If the argument consists of more than one symbol, and if the first token is
%a letter, use that letter for the computations:
    \\def\\gobble@till@marker##1\\endmarker{}%
    \\futurelet\\first@char\\gobble@till@marker#1\\endmarker
    \\ifcat\\noexpand\\first@char A\\else
      \\def\\first@char{}%
    \\fi
    \\macc@nested@a\\relax111{\\first@char}%
  \\fi
  \\endgroup
}
\\makeatother")

;;;; Actually add the macros defined above to preview and export headers, and define custom export class:

  ;; Required to load the variables we modify below
  (require 'ox-latex)

  (setq mbv/org-format-latex-header-default
        "\\documentclass{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}")
  (setq org-format-latex-header (concat mbv/org-format-latex-header-default mbv/my-latex-macros))
  ;; Define new class based on memoir
  (add-to-list 'org-latex-classes
               `("mbv/my-memoir-article"
                 ,(concat
                   "\\pdfoutput=1 % Required to make arXiv use pdflatex
\\documentclass[letterpaper,oneside,openany,article,english,10pt]{memoir}
[DEFAULT-PACKAGES]
[PACKAGES]
\\declaretheorem[sibling=theorem, style=plain]{corollary, lemma, proposition, conjecture}
\\declaretheorem[sibling=theorem, style=definition]{definition, example}
\\declaretheorem[sibling=theorem, style=remark]{remark, notation}
\\declaretheorem[numbered=no, style=remark]{acknowledgements}
"
                   mbv/my-latex-macros)
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               `("mbv/my-amsart"
                 ,(concat
                   "\\pdfoutput=1 % Required to make arXiv use pdflatex
\\documentclass{amsart}
[DEFAULT-PACKAGES]
[PACKAGES]
\\declaretheorem[numberwithin=section, style=plain]{theorem}  % Theorem environments using amsthm + thmtools
\\declaretheorem[sibling=theorem, style=plain]{corollary, lemma, proposition, conjecture}
\\declaretheorem[sibling=theorem, style=definition]{definition, example}
\\declaretheorem[sibling=theorem, style=remark]{remark, notation}
\\declaretheorem[numbered=no, style=remark]{acknowledgements}
"
                   mbv/my-latex-macros)
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; Set my amsart class as default for export
  (setq org-latex-default-class "mbv/my-amsart")

  ;; Add some bookmark-related options to the default hyperref template
  (setq org-latex-hyperref-template
        "\\hypersetup{
 pdfauthor={%a},
 pdftitle={%t},
 pdfkeywords={%k},
 pdfsubject={%d},
 pdflang={%L},
 final,
 bookmarks=true,
 bookmarksnumbered=true,
 bookmarksdepth=subsubsection}
 \\let\\subsectionautorefname\\sectionautorefname
 \\let\\subsubsectionautorefname\\sectionautorefname
"))
 #+end_src

 #+RESULTS:
 #+begin_example
 \hypersetup{
  pdfauthor={%a},
  pdftitle={%t},
  pdfkeywords={%k},
  pdfsubject={%d},
  pdflang={%L},
  final,
  bookmarks=true,
  bookmarksnumbered=true,
  bookmarksdepth=subsubsection}
  \let\subsectionautorefname\sectionautorefname
  \let\subsubsectionautorefname\sectionautorefname
 #+end_example

*** org-ref
:PROPERTIES:
:ID:       b5e82625-5a07-49c3-bee4-6dba80416507
:END:
This is only used to get access to functions used to transition away from org-ref to org-cite.
That said, the hydra provided by org-ref is quite nice...
TODO: Figure out how to manage bib files directly in emacs; org-ref may be part of that.

TODO: Rewrite this to use type citation instead of citation-reference. Then we don't have to do the manual format, it'll support global pre and post-fix. We should also find a way to record post-blank on parsing, and pass that to the citation.
#+begin_src emacs-lisp :tangle yes
(after! org-ref
  (setq! org-ref-insert-cite-function 'org-cite-insert)
  (defun mbv/org-ref-v3-to-org-cite ()
    (interactive)
    (require 'org-ref)
    (require 'org-ref-citation-links)
    (require 'oc)
    (require 'org-element)
    ;; Collect org-ref citation link objects
    (let ((cites (reverse (org-element-map (org-element-parse-buffer) 'link
                            (lambda (lnk)
                              (when (member (org-element-property :type lnk)
                                            (mapcar 'car org-ref-cite-types))
                                lnk))))))
      (cl-loop for cite in cites do
               ;; Substitute each org-ref link with the corresponding org-cite link.
               ;; Does not currently support global suffix and prefix, but I don't
               ;; think I ever use that
               (cl--set-buffer-substring
                (org-element-property :begin cite)
                (org-element-property :end cite)
                (format "[cite:%s]%s"
                        (mbv/org-ref-element-to-org-cite-citation-string cite)
                        ;; Blank space after the link is part of the cite object;
                        ;; reinsert it.
                        (make-string (org-element-property :post-blank cite) ?\ ))))))

  (defun mbv/org-ref-element-to-org-cite-citation-string (cite)
    ;; Use the builtin org-ref parser to turn citation link into a plist,
    ;; then convert that plist into the internal org format citation-reference
    ;; for citations, and use the built-in org interpreter to turn this into a string.
    (let ((data (org-ref-parse-cite-path (org-element-property :path cite))))
      (let ((cite-string
             (org-element-interpret-data
              (cl-loop for cite-reference in (plist-get data :references) collect
                       `(citation-reference
                         (:key ,(plist-get cite-reference :key)
                          :prefix ,(plist-get cite-reference :prefix)
                          :suffix ,(plist-get cite-reference :suffix)))))))
        ;; Remove unnecessary trailing semicolon.
        (substring cite-string 0 -1)))))
#+end_src
*** [?] org-noter
:PROPERTIES:
:ID:       9fa1c0ab-1397-4f9e-9025-a240a5a010a7
:END:
I really want org-noter-insert-note bound to "i", but I don't know how to do that.
TODO: Make the insert functions also enter insert-mode in the org buffer.
#+begin_src emacs-lisp :tangle yes
(map! :map org-noter-doc-mode-map
      "M-i" #'org-noter-insert-note
      "C-M-i" #'org-noter-insert-precise-note)
#+end_src
*** org-fragtog
:PROPERTIES:
:ID:       b436aa20-85bb-464a-bb78-00559f4fff16
:END:
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src
*** pdf-view
:PROPERTIES:
:ID:       c1fe9cd6-47ff-4ba9-b115-ce09e69fbc09
:END:
#+begin_src emacs-lisp :tangle yes
  (setq! pdf-view-resize-factor 1.1
        pdf-view-continuous nil
        pdf-view-display-size 'fit-page)
(map! :mode pdf-view-mode
      :nv "`" #'pdf-view-jump-to-register)
#+end_src
** Programming
*** rust
TODO: adaptive-wrap-prefix-mode causes issues with rustic-mode, add hook to disable
Might also want to disable smartparens-mode
#+begin_src emacs-lisp :tangle yes
(setq! lsp-rust-analyzer-cargo-watch-command "clippy"
       lsp-inlay-hints-mode t
       lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial"
       lsp-rust-analyzer-display-chaining-hints t
       lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil
       lsp-rust-analyzer-display-closure-return-type-hints t
       lsp-rust-analyzer-display-parameter-hints nil
       lsp-rust-analyzer-display-reborrow-hints nil
       lsp-ui-peek-always-show t
       lsp-ui-sideline-show-hover t
       lsp-ui-doc-enable nil)

(add-hook! rustic-mode #'turn-off-smartparens-mode)
(appendq! +word-wrap-visual-modes '(rustic-mode))
#+end_src
*** csv-mode
:PROPERTIES:
:ID:       91df0cdb-0c1c-4922-8af3-a104bcedb13a
:END:
#+begin_src emacs-lisp :tangle yes
(add-hook! csv-mode :append '(csv-align-mode csv-header-line))
#+end_src
** ledger
:PROPERTIES:
:ID:       fd2d4160-2733-4f26-bd40-3ce1f6202325
:END:
#+begin_src emacs-lisp :tangle yes
(after! ledger-mode
  (setq! ledger-complete-in-steps t
         ledger-post-amount-alignment-column 62))
#+end_src
** org
:PROPERTIES:
:ID:       b0fafc69-1a25-468b-bd79-83067b889d39
:END:
#+begin_src emacs-lisp           :tangle yes
(setq! org-directory mbv/my-org-directory)
(after! org
  (setq! ;; Recursively check a list of directories, thanks to https://www.reddit.com/r/orgmode/comments/6q6cdk/adding_files_to_the_agenda_list_recursively/
         ;; To specify single files, if necessary, would have to append them to org-agenda-files separately.
         ;;(org-agenda-files (apply 'append
           ;;                       (mapcar
             ;;                      (lambda (directory)
               ;;                      (directory-files-recursively
                 ;;                     directory org-agenda-file-regexp))
                   ;;                `(,mbv/my-org-directory)))) ;; Can add to the list containing ,mbv/my-org-directory

         org-src-window-setup 'split-window-below
         org-refile-allow-creating-parent-nodes 'confirm
         org-return-follows-link t))
;; Not sure whether something like this is needed.
;; (map! :mode org-mode
;;       :n "RET" nil)
#+end_src
*** org-gtd
:PROPERTIES:
:ID:       org-gtd-2024-04-05-16-13-44
:END:
#+begin_src emacs-lisp :tangle yes
(use-package! org-gtd
  :after org
  :init
  (setq org-gtd-update-ack "3.0.0")
  :config
  (setq! org-gtd-directory (concat mbv/my-org-directory "gtd/"))
  (setq org-edna-use-inheritance t)
  (org-edna-mode)

  (defun mu4e-org-gtd-store-and-capture()
    (interactive)
    (with-org-gtd-capture (call-interactively #'mu4e-org-store-and-capture)))

  ;; TODO: Find a way to add the link from mu4e to the body.
  ;; It should be possible to modify the implementation of org-gtd-delegate-create, the main
  ;; question is how to format the link object correctly. If we could use the org capture
  ;; template functionality that would help.
  ;; Maybe we just create an org-gtd capture template targeted at delegated stuff?
  (defun mu4e-org-gtd-email-reminder ()
    (interactive)
    (let ((subject (message-fetch-field "subject"))
          (to (message-fetch-field "to"))
          (link (mu4e-org-store-link))
          (reminder-date (org-read-date nil nil "+3d")))
      (org-gtd-delegate-create (format "Reminder: %s, %s" subject)
                               to
                               reminder-date)))

  (map! :leader
        (:prefix ("d" . "org-gtd")
         :desc "Add to inbox"   "i"  #'org-gtd-capture
         :desc "Clarify"        "c"  #'org-gtd-clarify-item
         :desc "Engage"         "e"  #'org-gtd-engage
         :desc "Process inbox"  "p"  #'org-gtd-process-inbox
         :desc "Show all next"  "n"  #'org-gtd-show-all-next
         :desc "Stuck projects" "s"  #'org-gtd-review-stuck-projects
         :desc "Organize this item" "o" #'org-gtd-organize)
        ;; TODO: Should we separate these by mode instead of creating longer prefixes?
        ;; Also: Add agenda bindings (either by mode or under "<leader> d a").
        (:prefix ("d m" . "org-gtd-mu4e")
         :desc "Add mail to org-gtd inbox" "i" #'mu4e-org-gtd-store-and-capture
         :desc "Delegate task via mail" "d" #'mu4e-org-gtd-email-reminder)))
#+end_src
*** org-id
    :PROPERTIES:
    :ID:       e63541f2-d373-42cb-ace7-d69e8ba7afe1
    :END:
Sets up org-id for consistent links that allow changing headlines/file locations without guaranteed breakage. Source is [[https://github.com/tkf/org-mode/blob/master/lisp/org-id.el][here]], some info taken from [[https://emacs.stackexchange.com/questions/12391/insert-org-id-link-at-point-via-outline-path-completion][here]]. With this setup, org-store-link and org-insert-link link via the id property instead of file location and section name; id is created as needed when org-store-link is called.
#+BEGIN_SRC emacs-lisp
(after! org
  (require 'org-id)
  ;; Always use ID's, create if doesn't exist
  (setq org-id-link-to-org-use-id t)
  ;; Make the default explicit
  (setq org-id-track-globally t)
  (setq org-id-locations-file (concat user-emacs-directory ".org-id-locations"))
  ;; Update id locations on startup
  (org-id-update-id-locations)

  ;; Completion function for id's when running org-insert-link. Taken from https://emacs.stackexchange.com/questions/12391/insert-org-id-link-at-point-via-outline-path-completion
  (defun org-id-complete-link (&optional arg)
    "Create an id: link using completion"
    (concat "id:"
            (org-id-get-with-outline-path-completion)))
  (org-link-set-parameters "id" :complete 'org-id-complete-link))
#+END_SRC

*** org-roam
:PROPERTIES:
:ID:       ab27712b-6660-4129-a423-017b1204243a
:END:
#+begin_src emacs-lisp :tangle yes
(after! org-roam-mode
  (setq! org-roam-directory mbv/my-org-roam-directory
         org-roam-db-location (concat org-roam-directory "org-roam.db")
         org-roam-buffer-no-delete-other-windows t) ; make org-roam buffer sticky
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol))
#+end_src
**** TODO org-roam-bibtex
:PROPERTIES:
:ID:       6e2498f5-cdb8-4aa6-8a9f-1507cc4d91c1
:END:
#+begin_src emacs-lisp :tangle yes
(add-hook! org-roam-mode (org-roam-bibtex-mode))
#+end_src

Legacy (not quite functional) config.
TODO: Make this actually work well.
#+begin_src emacs-lisp :tangle no
(after! org-roam-mode
  (setq!
   orb-preformat-keywords '("=key=" "title" "url" "file" "author-or-editor" "keywords" "citekey")
   org-roam-capture-templates
   '(("d" "default" plain "%?"
      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
      :unnarrowed t)
     ("r" "ref" plain
      "#+ROAM_REFS: ${ref}
- keywords :: ${keywords}
%?
\n* ${title}\n  :PROPERTIES:\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"
      :target (file+head "${citekey}.org" "#+TITLE: ${citekey}: ${title}")
      :unnarrowed t))))
;;   (setq orb-templates
;;         '(("r" "ref" plain (function org-roam-capture--get-point)
;;            ""
;;            :file-name "${slug}"
;;            :head "#+TITLE: ${=key=}: ${title}
;; \n#+ROAM_KEY: ${ref}
;; - keywords :: ${keywords}

;; \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

;;            :unnarrowed t))))

#+end_src
**** org-roam-server
:PROPERTIES:
:ID:       b6c36a3c-d646-44d5-abd0-7fa7fbf620ec
:END:
#+begin_src emacs-lisp :tangle yes
(after! org-roam-server-mode
  (setq! org-roam-server-host "127.0.0.1"
         org-roam-server-port 8080
         org-roam-server-authenticate nil
         org-roam-server-export-inline-images t
         org-roam-server-serve-files nil
         org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
         org-roam-server-network-poll t
         org-roam-server-network-arrows nil
         org-roam-server-network-label-truncate t
         org-roam-server-network-label-truncate-length 60
         org-roam-server-network-label-wrap-length 20))
#+end_src
*** deft
:PROPERTIES:
:ID:       599f0c3f-3533-4e09-9c25-8615d045ef4f
:END:
#+begin_src emacs-lisp :tangle yes
(after! deft
  (setq! deft-recursive t
  deft-use-filter-string-for-filename t
  deft-default-extension "org"
  deft-directory org-roam-directory)
  (defun cm/deft-parse-title (file contents)
    "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
      (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
	(if begin
	    (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
	  (deft-base-filename file))))

    (advice-add 'deft-parse-title :override #'cm/deft-parse-title)

    (setq deft-strip-summary-regexp
	  (concat "\\("
		  "[\n\t]" ;; blank
		  "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
		  "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
		  "\\)")))
#+end_src
** mu4e
:PROPERTIES:
:ID:       caded08a-c2a1-4133-a6cd-7d9f613db211
:END:
GMail is hostile to clients, and setting up mbsync with its OAuth2 requirements is terrible. It is possible with some extra scripting: https://github.com/MarcvdSluys/SundryNotes/blob/master/mbsync-with-gmail-oauth2.org
I don't want to use that method due to fragility and probable maintenance cost. Switching to Proton is probably better all around.

There is a solution with NotMuch: https://github.com/gauteh/lieer
It is still a Python script though.

TODO: Set up imapnotify for syncing emails automatically. https://gitlab.com/shackra/goimapnotify

TODO: Set up HU email.
#+begin_src emacs-lisp :tangle yes
(setq mu4e-update-interval (* 10 60)) ; check mail every 10 minutes

(set-email-account! "mvilladsen@pm.me"
                    '((mu4e-sent-folder . "/Proton/Sent")
                      (mu4e-drafts-folder     . "/Proton/Drafts")
                      (mu4e-trash-folder      . "/Proton/Trash")
                      (mu4e-refile-folder     . "/Proton/Archive")
                      (mu4e-compose-signature . "Best,
Mads")
                      ;; (+mu4e-personal-addresses . "mvilladsen@pm.me")
                      (smtpmail-smtp-user     . "mvilladsen@pm.me")
                      (smtpmail-smtp-server . "127.0.0.1")
                      (smtpmail-smtp-service . 1025)
                      (smtpmail-stream-type . ssl)))

(setq mu4e-maildir-shortcuts
  '(
    (:maildir "/Proton/Inbox"     :key  ?i)
    (:maildir "/Proton/Archive"   :key  ?a)
    (:maildir "/Proton/Drafts"     :key  ?d)
    (:maildir "/Proton/Sent"      :key  ?s)
    (:maildir "/Proton/Folders/Math/EAGER-GEN" :key ?e)
    (:maildir "/Proton/Folders/Math/arXiv" :key ?x)
    ))

(setq mu4e-bookmarks
      '(
        (:name "Unread messages" :query "flag:unread and not flag:trashed and not maildir:'/All Mail/'" :key ?u)
        (:name "Today's messages" :query "date:today..now" :key ?t)
        (:name "Last 7 days" :query "date:7d..now" :hide-unread nil :key ?w)
        (:name "Flagged messages" :query "flag:flagged" :key ?f)
        (:name "Messages with documents" :query "mime:application/pdf" :hide-unread t :key ?d)
        (:name "Messages with images" :query "mime:image/*" :hide-unread t :key ?p)
        ))

;; The mu search query used to count the number of 'interesting' mail to show in the mode line.
(setq mu4e-alert-interesting-mail-query "flag:unread and not flag:trashed and not maildir:/arXiv/ and not maildir:'/All Mail/' and not maildir:/EAGER-GEN/")
(mu4e-alert-set-default-style #'osx-notifier)

(setq mu4e-change-filenames-when-moving t ; avoid sync conflicts
      mu4e-compose-format-flowed t ; re-flow mail so it's not hard wrapped
      mu4e-get-mail-command "mbsync -a" ; 'mbsync-with-config': Here mbsync is a wrapped version that specifies a custom config file location and maildir, generated from nix.
      mu4e-search-results-limit 500) ; The default is 500, we set it explicitly for possible later reference. Note that mu4e-search-toggle-property can be called to set full search to on, which then shows all results.


(setq message-send-mail-function 'smtpmail-send-it)
#+end_src
