#+title: Config
* TODO Notes
** Ideas
*** Org-mode font lock optimization ideas
- Play with font-lock-maximum-decoration
- Play with (setq org-highlight-latex-and-related '(latex script entities)), other combinations
- Do some debugging/instrumentation a la https://www.emacswiki.org/emacs/FontLockSpeed
*** tree-sitter
#+begin_src emacs-lisp :tangle no
;; From https://github.com/emacs-tree-sitter/tree-sitter-langs/pull/157
(setq tree-sitter-langs--bin-dir (concat tree-sitter-langs-grammar-dir "bin/"))
(setq treesit-extra-load-path (append (list (tree-sitter-langs--bin-dir))))
(defun tree-sitter-langs-build--fixup-shared-objects-for-treesit ()
   "tree-sitter-langs-build releases grammars as LANG.so, but treesit needs libtree-sitter-LANG.so"
   (dolist (file (directory-files (tree-sitter-langs--bin-dir) 'full
                                  (concat "\\" (car tree-sitter-load-suffixes) "$")))
     ;; make symlink libtree-sitter-c.so -> c.so
     (make-symbolic-link file
                         (concat (file-name-as-directory (file-name-directory file))
                                 "libtree-sitter-"
                                 (file-name-nondirectory file)))))
(tree-sitter-langs-build--fixup-shared-objects-for-treesit)
#+end_src
** TODO Doom modules to check flags and config for later
- company
  - Useful
- vertico
  - Useful

** TODO evil-lion
Evil-lion seems like a useful tool to learn, but current bindings also conflict with org-mode. Do some rebinding.
* Package installation
** Original doom package.el
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
                                        ;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
                                        ;(package! another-package
                                        ;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
                                        ;(package! this-package
                                        ;  :recipe (:host github :repo "username/repo"
                                        ;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
                                        ;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
                                        ;(package! builtin-package :recipe (:nonrecursive t))
                                        ;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
                                        ;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
                                        ;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
                                        ;(unpin! pinned-package)
;; ...or multiple packages
                                        ;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
                                        ;(unpin! t)

#+end_src
** Personal package installation
#+begin_src emacs-lisp :tangle packages.el
(package! org-roam-bibtex)
(package! org-roam-server)
(package! org-ref)
(package! org-fragtog)
(package! sage-shell-mode)
#+end_src

* Original doom config.el
#+begin_src emacs-lisp :tangle yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Mads Bach Villadsen"
      user-mail-address "mvilladsen@pm.me")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'visual)

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src
* File location variables
#+begin_src emacs-lisp :tangle yes
(setq! mbv/my-personal-directory "~/Dropbox/docs/"
       mbv/my-org-directory (concat mbv/my-personal-directory "org/")
       mbv/my-papers-directory (concat mbv/my-personal-directory "work/math-resources/sources/papers/")
       mbv/my-org-roam-directory (concat mbv/my-personal-directory "work/math-resources/org-roam/")
       mbv/my-paper-notes-directory (concat mbv/my-org-roam-directory "paper-notes/")
       mbv/my-main-bib-file (concat mbv/my-personal-directory "work/math-resources/sources/papers.bib"))
#+end_src
* Config from legacy
** desktop-save-mode 
#+begin_src emacs-lisp :tangle no
  ;; Save buffers between restarts
  (setq desktop-dirname (concat user-emacs-directory "desktop/")
        desktop-base-file-name ".emacs.desktop"
        desktop-base-lock-name (concat desktop-base-file-name ".lock")
	;; Move (undo) history file to computer-specific directory.
        savehist-file (concat desktop-dirname "history")
        ;;desktop-files-not-to-save "" ; If filename matches given regexp, do not save buffer
        desktop-path (list desktop-dirname)
        desktop-save t
        desktop-auto-save-timeout 30 ; Default auto-save timeout, made explicit
        desktop-file-name-format 'tilde ; Save file paths relative to ~ (works in particular with Dropbox symlink)
        desktop-restore-frames t
        desktop-restore-in-current-display nil
        desktop-restore-forces-onscreen nil)
  (desktop-save-mode 1)
  (save-place-mode 1)

  ;; Save a list of recent files visited.
  (recentf-mode 1)
  (setq recentf-max-saved-items 1000) ;; just 20 is too recent

  ;; Save minibuffer history
  (savehist-mode 1)
  (setq history-length 1000)
#+end_src
* Emacs server
#+begin_src emacs-lisp :tangle yes
(server-start)
#+end_src
* Packages and Doom module config
** doom
#+begin_src emacs-lisp :tangle yes
(setq! doom-molokai-brighter-comments t)
(setq! doom-molokai-brighter-modeline t)
(setq! doom-theme 'doom-molokai)
#+end_src
** evil
#+begin_src emacs-lisp :tangle yes
(setq! evil-cross-lines t
       evil-snipe-scope 'buffer
       evil-want-fine-undo t)
;; Disable default yank to system clipboard.
;; To use system clipboard, use + register, e.g.
;; +dd, +cw, +y.
(setq! select-enable-clipboard nil)

(map! "s-c" #'copy-to-clipboard
      "s-v" #'paste-from-clipboard)

;; From https://emacs.stackexchange.com/questions/12122/how-to-access-os-clipboard-using-emacs-evil
(defun paste-from-clipboard ()
  (interactive)
  (setq x-select-enable-clipboard t)
  (yank)
  (setq x-select-enable-clipboard nil))
(defun copy-to-clipboard()
  (interactive)
  (setq x-select-enable-clipboard t)
  (kill-ring-save (region-beginning) (region-end))
  (setq x-select-enable-clipboard nil))
#+end_src
** company
#+begin_src emacs-lisp :tangle yes
(map! :after company
      :map company-active-map
     "C-l" #'company-complete-common-or-cycle
     "<tab>" nil
     "<backtab>" nil
     "TAB" nil
     "RET" nil
     "<return>" nil
     "C-<return>" #'company-complete-selection)
#+end_src
** vertico
#+begin_src emacs-lisp :tangle yes
(setq! consult-locate-args "locate -i")
#+end_src
** word-wrap
#+begin_src emacs-lisp
;; enable word-wrap (almost) everywhere
(+global-word-wrap-mode +1)
#+end_src
** TODO biblio
Modify 'arxiv-get-pdf-add-bibtex-entry' to use different file name from bibtex key (add title to pdf file name).
Maybe define a general function to rectify pdf file name for any entry, and call it after arxiv-get-pdf-add-bibtex-entry?
#+begin_src emacs-lisp :tangle yes
(after! citar
  (setq! bibtex-completion-bibliography mbv/my-main-bib-file
         citar-bibliography mbv/my-main-bib-file
         bibtex-completion-library-path mbv/my-papers-directory
         bibtex-completion-notes-path mbv/my-paper-notes-directory
         citar-library-paths `(,mbv/my-papers-directory)
         citar-notes-paths `(,mbv/my-paper-notes-directory)
         bibtex-completion-pdf-field "file" ;; Read "file" field in bib file to find pdf files
         bibtex-completion-find-additional-pdfs t ;; Find all files matching [bibtexkey]*.pdf
         bibtex-completion-pdf-extension '(".pdf" ".djvu") ;; Match djvu files too. Other filetypes can also be added.
         bibtex-autokey-year-length 4
             bibtex-autokey-titlewords 0
         bibtex-autokey-name-year-separator ""
         bibtex-autokey-name-case-convert-function 'upcase-initials)
  (citar-org-roam-mode))
(map! :after citar
      :leader
      :prefix "r"
      "o" #'citar-open
      "i" #'citar-insert-citation)
#+end_src
*** org-noter
#+begin_src emacs-lisp :tangle yes
(after! org-mode
  (setq! org-noter-hide-other nil
         org-noter-notes-search-path mbv/my-paper-notes-directory))
#+end_src
** ledger
#+begin_src emacs-lisp :tangle yes
(after! ledger-mode
  (setq! ledger-complete-in-steps t
         ledger-post-amount-alignment-column 62))
#+end_src
** latex
*** RefTeX
#+begin_src emacs-lisp :tangle yes
(setq! reftex-default-bibliography mbv/my-main-bib-file)
#+end_src
*** PDF viewer
#+begin_src emacs-lisp :tangle yes
(setq! +latex-viewers '(pdf-tools))
#+end_src
*** cdlatex
- cdlatex-command-alist lists keywords for tab-completion

Note that the cdlatex variables have to be given a characters ASCII code, ? converts a character to its code (you might have to escape some chars with \). The elisp function string-to-char does the same (for the first char in a string), print and insert takes an ASCII code and either prints the corresponding char in the minibuffer, or inserts the char in the buffer.
(Actually a char is its code, ? just instructs Emacs to treat the char as itself and not as a function name.)

According to https://lists.gnu.org/archive/html/emacs-orgmode/2011-10/msg00716.html, you have to restart emacs or run (cdlatex-reset-mode) after changing this config.

#+begin_src emacs-lisp :tangle yes
;; Use cdlatex over yasnippet (should still default back to yasnippet).
(map! :map cdlatex-mode-map
      :i "TAB" #'cdlatex-tab)

;; Sets cdlatex-math-modify-prefix to its default explicity, and changes math-symbol key.
;; org-defkey is used to let cdlatex key interact correctly with other stuff.
(setq cdlatex-math-modify-prefix ?')
(setq cdlatex-math-symbol-prefix ?`) ; On danish keyboard layout, switch this to ?¨ instead
(after! org-mode (org-defkey org-cdlatex-mode-map "`" 'cdlatex-math-symbol))
;; add symbols
(setq cdlatex-math-symbol-alist
      '((?F ("\\Phi"))
        (?> ("\\xrightarrow" "\\mapsto" "\\max"))
        (?t ("\\tau" "\\otimes" "\\tan"))
        (?. ("\\cdots" "\\ldots" "\\cdot"))
        (?d ("\\delta" "\\partial" "\\bar{\\partial}"))
        (?* ("\\times" "\\dagger"))
        (?: ("\\colon"))
        (?b ("\\beta" "\\bullet"))
        (?\{ ("\\subseteq" "\\subset"))
        (?\} ("\\supseteq" "\\supset"))
        (?+ ("\\oplus" "\\bigoplus" "\\cup"))))
(setq cdlatex-math-modify-alist
      '((?B "\\mathbb" nil t nil nil)
        (?s "\\mathscr" nil t nil nil)
        (?f "\\mathfrak" nil t nil nil)
        (?T "\\widebar" nil t nil nil)
        (?o "\\operatorname" nil t nil nil)))

(setq cdlatex-use-dollar-to-ensure-math nil)
#+end_src

** org
#+begin_src emacs-lisp           :tangle yes
(setq! org-directory mbv/my-org-directory)
(after! org
  (setq! ;; Recursively check a list of directories, thanks to https://www.reddit.com/r/orgmode/comments/6q6cdk/adding_files_to_the_agenda_list_recursively/
         ;; To specify single files, if necessary, would have to append them to org-agenda-files separately.
         ;;(org-agenda-files (apply 'append
           ;;                       (mapcar
             ;;                      (lambda (directory)
               ;;                      (directory-files-recursively
                 ;;                     directory org-agenda-file-regexp))
                   ;;                `(,mbv/my-org-directory)))) ;; Can add to the list containing ,mbv/my-org-directory

         org-src-window-setup 'split-window-below
         org-refile-allow-creating-parent-nodes 'confirm
         org-return-follows-link t))
;; Not sure whether something like this is needed.
;; (map! :mode org-mode
;;       :n "RET" nil)
#+end_src
*** org/latex setup
    :PROPERTIES:
    :ID:       a1e22973-e0e1-497e-94de-1b4c291033c6
    :END:
    Some org/latex settings, and a preamble setup.
**** Origin
     The package list and classes are originally based on [[file:project-skeletons/homework/][this template]]. In addition to what's included here, that template also loads the packages:
     - showkeys (in draft mode, shows labels where defined in output PDF)
     - algorithm/pseudocode typesetting packages
     - csquotes (adjust latex quote style)
     - enumitem (control list formatting more carefully; used for good theorem environments)
     - cref (cleveref; \cref{label} automatically writes, e.g., "Lemma 17.2" instead of just 17.2 if the label refers to a lemma. Means that I can easily change the lemma to a proposition without having to check consistency manually)
     - fixme (create todo notes in latex source that block final compilation if not fixed)
     - ntheorem
     - epstopdf
     - siunitx
     The original template also includes codes for:
     - setting up siunitx properly
     - Alternate quote styles
     - tikz setup; loading tikz-babel and tikz-cd, and defining commands for pushout and pullback squares
     - extensive cref setup in both Danish and English
     - custom fixme commands
     - extensive ntheorem setup for all kinds of theorem and proof environments; uses enumitem to provide environment-specific list types (see theoremlist.tex)
     - The command \\widebar in direct tex. The only package I know that provides this command is [[http://mirrors.rit.edu/CTAN/fonts/mathabx/mathtest.pdf][mathabx]], but that also changes many other things, and I don't know whether it's actively supported
     - Typesetting commands for a host of categories. Most of that probably shouldn't be imported to here, instead a more flexible approach should be used except in specific cases.
     - A multitude of custom math commands. Some of these should be imported here, others probably not; mainly a lot of the mathoperator declarations, maybe a few synonyms, should be included.
       - Better might be to try to fit a bunch of things into cdlatex.

**** Basic setup
 #+BEGIN_SRC emacs-lisp
;; Whether to preview latex fragments when opening new Org file. Might become slow in big files, in which case
;; it can be disabled here or by adding the following on a per-file basis: #+STARTUP: nolatexpreview
(setq org-startup-with-latex-preview 'nil)
(setq org-latex-prefer-user-labels t)
(setq org-latex-reference-command "\\autoref{%s}")
(after! org-mode
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0)))
;; Enable org-cdlatex in every org buffer
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)

(defun mbv/clear-org-latex-preview-cache ()
  (interactive)
  (dired-delete-file org-preview-latex-image-directory 'always t))
 #+END_SRC
**** PROJ Org-TeX compilation tools
dvipng and dvisvgm do not support putting tikz code in previews. This can be done with imagemagick, but that's prone to bugs, especially around imagemagick updates.

#+begin_src emacs-lisp :tangle yes
;; -f forces latexmk to keep going on errors
;; -gg cleans all generated files before generating, in particular latexmk ALWAYS compiles the source even if nothing has changed.
(setq org-latex-pdf-process '("latexmk -f -gg -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

Tectonic holds promise, but biber integration is woefully bad, and there's errors around the \pdfoutput option, which makes this incompatible with arXiv.
#+begin_src emacs-lisp :tangle no
(setq org-latex-pdf-process '("tectonic -X compile --outdir=%o -Z shell-escape -Z continue-on-errors %f"))
#+end_src

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-preview-latex-default-process 'dvisvgm)
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
#+END_SRC

***** ImageMagick
At the time of writing (200429), ImageMagick throws a [[https://github.com/ImageMagick/ImageMagick/issues/884][warning]] about color space and grayscale images when trying to preview fragments. It does not affect output. According to the linked github issue (and own testing), adding -strip to the arguments to 'convert' removes the warning; there are other solutions in that thread.
Note that trying to generate many fragments at once causes some slowdown, since fragment generation is not done asynchronously. However, fragments are cached, so this should not be a big deal.
#+begin_src emacs-lisp :tangle no
(plist-put (cdr (assoc 'imagemagick org-preview-latex-process-alist)) :image-converter '("convert -density %D -trim -strip -antialias %f -quality 100 %O"))
#+end_src

**** Package and macro setup
 The latex preamble used for latex fragment previews is governed by org-format-latex-header, while export is governed by org-latex-classes and org-latex-default-class
 To add more macros to both that preamble and (multiple) export preambles, we define a variable to hold macros, then append that to the other preambles.
 LaTeX note: amsmath defines a bunch of standard operators [[http://mirror.utexas.edu/ctan/macros/latex/required/amsmath/amsopn.pdf][here]]. Some of these are 'incorrect', i.e. $\hom$ should typeset Hom, not hom. The LaTeX code "\let\hom\undefined" unbinds $\hom$, assuming \undefined is, in fact, undefined.
 Semantic notes:
  - $\id$ is the identity map
  - $\ker,\coker,\im$ are kernel, cokernel, image of a function. \ker is defined by default.
  - $\hom$ is a space of homomorphism, or the set of morphisms between two objects in a category
  - $\ext$ is an Ext functor
  - $\shom$ and $\sext$ are sheafy versions of their non-s namesakes
  - $\tensor$ is tne tensor product of two modules/other
  - $\spec$ is the affine scheme of a ring
  - $\proj$ is the projective scheme of a graded ring
  - \(\pic\) denotes Picard groups
  - $\codim$ is codimension
  - $\Supp$ denotes support of something, e.g. a sheaf
  - \(\dualab{A}\) indicates the dual abelian variety of \(A\) (i.e. \(\pic^0(A)\)
  - \(\sh F\): Typeface for sheaves
  - \proofstep is for partitioning long proofs into individual steps, to be used inside \begin{proof} environment. From https://tex.stackexchange.com/questions/207309/how-to-nicely-split-proofs-into-different-parts
 #+begin_src emacs-lisp
(after! org
  ;; Make more LaTeX packages available for org and exported latex. These packages are added to preamble of exported latex. If t is specified, the package is also available when viewing latex snippets in org-mode.
  (setq org-latex-packages-alist
        '(("" "etoolbox" t) ;; programming logic for \abs, \norm, \inner commands
          ("" "microtype" t) ;; typographic improvements
          ("" "mathrsfs" t) ;; \mathscr font
          ("AUTO" "babel" t) ;; gets passed options from \documentclass as well
          ("" "tikz" t)
          ("" "tikz-cd" t)
          ("" "amsthm" t)
          ("" "thmtools" t)
          ("" "mathabx" t)
          ("" "thm-restate" t)
          ("" "xpatch" t)
          ("autostyle" "csquotes" t)))

  (setq mbv/my-latex-macros
        "
\\DeclareMathOperator\\id{id}
\\DeclareMathOperator\\coker{coker}
\\DeclareMathOperator\\im{im}
\\DeclareMathOperator\\codim{codim}
\\let\\hom\\undefined
\\DeclareMathOperator\\hom{Hom}
\\DeclareMathOperator\\shom{\\underline{Hom}}
\\DeclareMathOperator\\ext{Ext}
\\DeclareMathOperator\\sext{\\underline{Ext}}
\\DeclareMathOperator\\tor{Tor}
\\DeclareMathOperator\\rk{rk}
\\newcommand\\tensor{\\otimes}
\\DeclareMathOperator\\spec{Spec}
\\DeclareMathOperator\\proj{Proj}
\\DeclareMathOperator\\pic{Pic}
\\DeclareMathOperator\\supp{Supp}
\\newcommand\\dualab\\widehat
\\newcommand\\sh\\mathscr

\\makeatletter
\\newcounter{proofstep}
\\xpretocmd{\\proof}{\\setcounter{proofstep}{0}}{}{}
\\newcommand{\\proofstep}[1]{%
  \\par
  \\addvspace{\\medskipamount}%
  \\stepcounter{proofstep}%
  \\noindent\\emph{Step \\theproofstep: #1}\\par\\nobreak\\smallskip
  \\@afterheading
}
\\makeatother")

;;;; Actually add the macros defined above to preview and export headers, and define custom export class:

  ;; Required to load the variables we modify below
  (require 'ox-latex)

  (setq mbv/org-format-latex-header-default
        "\\documentclass{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}")
  (setq org-format-latex-header (concat mbv/org-format-latex-header-default mbv/my-latex-macros))
  ;; Define new class based on memoir
  (add-to-list 'org-latex-classes
               `("mbv/my-memoir-article"
                 ,(concat
                   "\\pdfoutput=1 % Required to make arXiv use pdflatex
\\documentclass[letterpaper,oneside,openany,article,english,10pt]{memoir}
[DEFAULT-PACKAGES]
[PACKAGES]
\\declaretheorem[sibling=theorem, style=plain]{corollary, lemma, proposition, conjecture}
\\declaretheorem[sibling=theorem, style=definition]{definition, example}
\\declaretheorem[sibling=theorem, style=remark]{remark, notation}
\\declaretheorem[numbered=no, style=remark]{acknowledgements}
"
                   mbv/my-latex-macros)
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               `("mbv/my-amsart"
                 ,(concat
                   "\\pdfoutput=1 % Required to make arXiv use pdflatex
\\documentclass{amsart}
[DEFAULT-PACKAGES]
[PACKAGES]
\\declaretheorem[numberwithin=section, style=plain]{theorem}  % Theorem environments using amsthm + thmtools
\\declaretheorem[sibling=theorem, style=plain]{corollary, lemma, proposition, conjecture}
\\declaretheorem[sibling=theorem, style=definition]{definition, example}
\\declaretheorem[sibling=theorem, style=remark]{remark, notation}
\\declaretheorem[numbered=no, style=remark]{acknowledgements}
"
                   mbv/my-latex-macros)
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; Set my amsart class as default for export
  (setq org-latex-default-class "mbv/my-amsart")

  ;; Add some bookmark-related options to the default hyperref template
  (setq org-latex-hyperref-template
        "\\hypersetup{
 pdfauthor={%a},
 pdftitle={%t},
 pdfkeywords={%k},
 pdfsubject={%d},
 pdflang={%L},
 final,
 bookmarks=true,
 bookmarksnumbered=true,
 bookmarksdepth=subsubsection}
 \\let\\subsectionautorefname\\sectionautorefname
 \\let\\subsubsectionautorefname\\sectionautorefname
"))
 #+end_src
*** org-id
    :PROPERTIES:
    :ID:       e63541f2-d373-42cb-ace7-d69e8ba7afe1
    :END:
Sets up org-id for consistent links that allow changing headlines/file locations without guaranteed breakage. Source is [[https://github.com/tkf/org-mode/blob/master/lisp/org-id.el][here]], some info taken from [[https://emacs.stackexchange.com/questions/12391/insert-org-id-link-at-point-via-outline-path-completion][here]]. With this setup, org-store-link and org-insert-link link via the id property instead of file location and section name; id is created as needed when org-store-link is called.
#+BEGIN_SRC emacs-lisp
(after! org
  (require 'org-id)
  ;; Always use ID's, create if doesn't exist
  (setq org-id-link-to-org-use-id t)
  ;; Make the default explicit
  (setq org-id-track-globally t)
  (setq org-id-locations-file (concat user-emacs-directory ".org-id-locations"))
  ;; Update id locations on startup
  (org-id-update-id-locations)

  ;; Completion function for id's when running org-insert-link. Taken from https://emacs.stackexchange.com/questions/12391/insert-org-id-link-at-point-via-outline-path-completion
  (defun org-id-complete-link (&optional arg)
    "Create an id: link using completion"
    (concat "id:"
            (org-id-get-with-outline-path-completion)))
  (org-link-set-parameters "id" :complete 'org-id-complete-link))
#+END_SRC

*** org-roam
#+begin_src emacs-lisp :tangle yes
(after! org-roam-mode
  (setq! org-roam-directory mbv/my-org-roam-directory
         org-roam-db-location (concat org-roam-directory "org-roam.db")
         org-roam-buffer-no-delete-other-windows t) ; make org-roam buffer sticky
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol))
#+end_src
**** TODO org-roam-bibtex
#+begin_src emacs-lisp :tangle yes
(add-hook! org-roam-mode (org-roam-bibtex-mode))
#+end_src

Legacy (not quite functional) config.
TODO: Make this actually work well.
#+begin_src emacs-lisp :tangle no
(after! org-roam-mode
  (setq!
   orb-preformat-keywords '("=key=" "title" "url" "file" "author-or-editor" "keywords" "citekey")
   org-roam-capture-templates
   '(("d" "default" plain "%?"
      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
      :unnarrowed t)
     ("r" "ref" plain
      "#+ROAM_REFS: ${ref}
- keywords :: ${keywords}
%?
\n* ${title}\n  :PROPERTIES:\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"
      :target (file+head "${citekey}.org" "#+TITLE: ${citekey}: ${title}")
      :unnarrowed t))))
;;   (setq orb-templates
;;         '(("r" "ref" plain (function org-roam-capture--get-point)
;;            ""
;;            :file-name "${slug}"
;;            :head "#+TITLE: ${=key=}: ${title}
;; \n#+ROAM_KEY: ${ref}
;; - keywords :: ${keywords}

;; \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

;;            :unnarrowed t))))

#+end_src
**** org-roam-server
#+begin_src emacs-lisp :tangle yes
(after! org-roam-server-mode
  (setq! org-roam-server-host "127.0.0.1"
         org-roam-server-port 8080
         org-roam-server-authenticate nil
         org-roam-server-export-inline-images t
         org-roam-server-serve-files nil
         org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
         org-roam-server-network-poll t
         org-roam-server-network-arrows nil
         org-roam-server-network-label-truncate t
         org-roam-server-network-label-truncate-length 60
         org-roam-server-network-label-wrap-length 20))
#+end_src
*** org-ref
This is only used to get access to functions used to transition away from org-ref to org-cite.
That said, the hydra provided by org-ref is quite nice...
TODO: Figure out how to manage bib files directly in emacs; org-ref may be part of that.

TODO: Rewrite this to use type citation instead of citation-reference. Then we don't have to do the manual format, it'll support global pre and post-fix. We should also find a way to record post-blank on parsing, and pass that to the citation.
#+begin_src emacs-lisp :tangle yes
(after! org-ref
  (setq! org-ref-insert-cite-function 'org-cite-insert)
  (defun mbv/org-ref-v3-to-org-cite ()
    (interactive)
    (require 'org-ref)
    (require 'org-ref-citation-links)
    (require 'oc)
    (require 'org-element)
    ;; Collect org-ref citation link objects
    (let ((cites (reverse (org-element-map (org-element-parse-buffer) 'link
                            (lambda (lnk)
                              (when (member (org-element-property :type lnk)
                                            (mapcar 'car org-ref-cite-types))
                                lnk))))))
      (cl-loop for cite in cites do
               ;; Substitute each org-ref link with the corresponding org-cite link.
               ;; Does not currently support global suffix and prefix, but I don't
               ;; think I ever use that
               (cl--set-buffer-substring
                (org-element-property :begin cite)
                (org-element-property :end cite)
                (format "[cite:%s]%s"
                        (mbv/org-ref-element-to-org-cite-citation-string cite)
                        ;; Blank space after the link is part of the cite object;
                        ;; reinsert it.
                        (make-string (org-element-property :post-blank cite) ?\ ))))))

  (defun mbv/org-ref-element-to-org-cite-citation-string (cite)
    ;; Use the builtin org-ref parser to turn citation link into a plist,
    ;; then convert that plist into the internal org format citation-reference
    ;; for citations, and use the built-in org interpreter to turn this into a string.
    (let ((data (org-ref-parse-cite-path (org-element-property :path cite))))
      (let ((cite-string
             (org-element-interpret-data
              (cl-loop for cite-reference in (plist-get data :references) collect
                       `(citation-reference
                         (:key ,(plist-get cite-reference :key)
                          :prefix ,(plist-get cite-reference :prefix)
                          :suffix ,(plist-get cite-reference :suffix)))))))
        ;; Remove unnecessary trailing semicolon.
        (substring cite-string 0 -1)))))
#+end_src
*** [?] org-noter
I really want org-noter-insert-note bound to "i", but I don't know how to do that.
TODO: Make the insert functions also enter insert-mode in the org buffer.
#+begin_src emacs-lisp :tangle yes
(map! :map org-noter-doc-mode-map
      "M-i" #'org-noter-insert-note
      "C-M-i" #'org-noter-insert-precise-note)
#+end_src
*** org-fragtog
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src
** calendar
*** TODO org-gcal
TODO: Actually integrate with Org and start using.
- https://200ok.ch/posts/2022-02-13_integrating_org_mode_agenda_into_other_calendar_apps.html
- https://github.com/kidd/org-gcal.el

Set "echo 'allow-loopback-pinentry' >> .gnupg/gpg-agent.conf && gpgconf --reload gpg-agent". Note also that there is currently a bug in Emacs integration with gpg version 2.4.x for x>0 (https://dev.gnupg.org/T6481), seems that there's a patch on the way though.
As of 231130, I have manually patched gnupg (brew reinstall -is) and pinned gnupg in brew to 2.4.3. Check that bug has been fixed before upgrading.

Homebrew GPG patching instructions:
1. 'brew reinstall -si gpg' - collects sources and puts you in a shell in the build directory. Tells you a prefix to install to, in this case /opt/homebrew/Cellar/gnupg/2.4.3
2. Patch the sources, e.g. download the raw diff of a patch and 'git apply' it. In this case the patch is https://files.gnupg.net/file/data/3un4erk3tjnseburvkuy/PHID-FILE-hqe3gegzy7m6xb755z73/file
   1. You may need to manually fit things together.
3. For most projects, there will be some ./configure, make, make check, make install business to go through. Do:
   1. Check the corresponding brewfile for configure commands that might be needed, and set the --prefix flag to configure. To find the brew file, try locate gpg | grep \.rb if brew edit gpg doesn't work.
   2. The build commands will look something like: 'mkdir build && cd build && ../configure --prefix=/opt/homebrew/Cellar/gnupg/2.4.3 --enable-all-tests --with-pinentry-pgm=/opt/homebrew/bin/pinentry && make && make install && exit'

#+begin_src emacs-lisp :tangle yes
(setq org-gcal-client-id "33033572708-h0679g3cnald3pvk15l27ia562p6fej8.apps.googleusercontent.com"
      org-gcal-client-secret "GOCSPXxm1CLX68pQZl50yWaqTNCSEMZ9HW"
      org-gcal-fetch-file-alist `(("madsbv96@gmail.com" . ,(concat org-directory "calendar-madsbv96.org"))
                                  ("318301d6be94b800863929948dc400142680118568b177d65627f84cbbb93a7a@group.calendar.google.com" . ,(concat org-directory "calendar-timekeeping.org"))))
(setq plstore-cache-passphrase-for-symmetric-encryption t)
(require 'org-gcal)
(org-gcal-reload-client-id-secret)

#+end_src
*** TODO calfw
TODO: Integration with org-agenda involves switching this to pull directly from agenda with cfw:org-create-source instead.
#+begin_src emacs-lisp :tangle yes
(defun mbv/open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-file-source "timekeeping" (concat org-directory "calendar-timekeeping.org") "Green")
    (cfw:org-create-file-source "madsbv96" (concat org-directory "calendar-madsbv96.org") "Red"))))
#+end_src
** pdf-view
#+begin_src emacs-lisp :tangle yes
(after! pdf-view-mode
  (setq! pdf-view-resize-factor 1.1))
(map! :mode pdf-view-mode
      :nv "`" #'pdf-view-jump-to-register)
#+end_src
** deft
#+begin_src emacs-lisp :tangle yes
(after! deft
  (setq! deft-recursive t
  deft-use-filter-string-for-filename t
  deft-default-extension "org"
  deft-directory org-roam-directory)
  (defun cm/deft-parse-title (file contents)
    "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
      (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
	(if begin
	    (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
	  (deft-base-filename file))))

    (advice-add 'deft-parse-title :override #'cm/deft-parse-title)

    (setq deft-strip-summary-regexp
	  (concat "\\("
		  "[\n\t]" ;; blank
		  "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
		  "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
		  "\\)")))
#+end_src
** snippet
#+begin_src emacs-lisp :tangle yes
;; Nested snippets
(after! yasnippet
  (setq! yas-triggers-in-field t))
(map! :after yasnippet
      "C-s" #'yas-next-field)
#+end_src
** magit
#+begin_src emacs-lisp :tangle yes
;; Making magit and yadm (utility I use for managing dotfiles) cooperate. Run (magit-status "/yadm::"). Taken from: https://github.com/TheLocehiliosan/yadm/blob/master/yadm.md
(after! magit
  (require 'tramp)
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter")))
                 (tramp-login-env (("SHELL") ("/bin/sh")))
                 (tramp-remote-shell "/bin/sh")
                 (tramp-remote-shell-args ("-c"))))

  (defun mbv/yadm ()
    (interactive)
    (magit-status "/yadm::")))
#+end_src

** mu4e
GMail is hostile to clients, and setting up mbsync with its OAuth2 requirements is terrible. It is possible with some extra scripting: https://github.com/MarcvdSluys/SundryNotes/blob/master/mbsync-with-gmail-oauth2.org
I don't want to use that method due to fragility and probable maintenance cost. Switching to Proton is probably better all around.

There is a solution with NotMuch: https://github.com/gauteh/lieer
It is still a Python script though.

TODO: Set up imapnotify for syncing emails automatically. https://gitlab.com/shackra/goimapnotify

TODO: Set up HU email.
#+begin_src emacs-lisp :tangle yes
(set-email-account! "mvilladsen@pm.me"
                    '((mu4e-sent-folder . "/proton/Sent")
                      (mu4e-drafts-folder     . "/proton/Drafts")
                      (mu4e-trash-folder      . "/proton/Trash")
                      (mu4e-refile-folder     . "/proton/All Mail")
                      (mu4e-compose-signature . "Best,\nMads")
                      ;; (+mu4e-personal-addresses . "mvilladsen@pm.me")
                      (smtpmail-smtp-user     . "mvilladsen@pm.me")
                      (smtpmail-smtp-server . "127.0.0.1")
                      (smtpmail-smtp-service . 1025)
                      (smtpmail-stream-type . ssl)))



;; mu4e-maildir-shortcuts would be useful to set, but use the new format (see docs).
;; Should be per-account. Does doom already do anything useful?

(setq mu4e-change-filenames-when-moving t ; avoid sync conflicts
      mu4e-update-interval (* 10 60) ; check mail 10 minutes
      mu4e-compose-format-flowed t ; re-flow mail so it's not hard wrapped
      mu4e-get-mail-command "mbsync -a")



(setq message-send-mail-function 'smtpmail-send-it)
#+end_src
